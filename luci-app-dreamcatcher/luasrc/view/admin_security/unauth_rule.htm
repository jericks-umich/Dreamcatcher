<%+header%>

<h1><a id="title1" name="title1"><%:Rules Page%></a></h1>
<div> This page shows the rules for dreamcatcher.</div>
<!--<form id="accept_all" method="post" action="">
  <input type="hidden" name="accept_all_rule" id="accept_all_rule" value="233"></input>
  <input style="float:right" type="button" onclick="accept_all_rules()" value="Accepted all pending rules" />
  <br>
</form>-->
<div id="chart" name="chart">
	<style type="text/css" scoped>
	path.link {
	  fill: none;
	  stroke: red;
	  stroke-width: 1.5px;
	}
	 
	path.link.unicast_accept {
	  stroke: red;
	}
	 
	path.link.unicast_reject {
	  stroke-dasharray: 5,10;
	}
	 
	circle {
	  fill: #ccc;
	  stroke: #fff;
	  stroke-width: 1.5px;
	}
	 
	text {
	  fill: black;
	  font: 12px sans-serif;
	  pointer-events: none;
	}
	</style>	
</div>
<h2><a id="title2" name="title2"><%:Pending Rules%></a></h2>     
<br>
<pre>
<%=temp%>
</pre>
<h2><a id="title2" name="title2"><%:Approved Rules%></a></h2>
<br>
<pre>
<%=permanent%>
</pre>

<script>
function modify_rule(IcName,method){
//	if (method == 'accept' || method == 'reject'){
//		r = confirm("Warning:\nAllowing/Blocking connections will Allow/Block ALL such connections. This may have security implications or may mean your devices will not work properly. Are you sure you want to do this? \n\nIf you would like more information and to selectively allow connections from, please use the Advanced tab.");
//		if (r == true){
			document.getElementById(IcName.concat(method)).submit();
//		}
//	}else{
//		document.getElementById(IcName.concat(method)).submit();
//	}
}

function modify_rule_2(IcName,method){
	document.getElementById(IcName.concat(method)).submit();
}

</script>
<meta charset="utf-8">
<script src="http://d3js.org/d3.v3.js"></script>
<script>

var doc = document,
    b = doc.getElementById('maincontent'),
    x = Math.min(window.innerWidth,b.clientWidth);

var links=[
<%=links%>
];
 
 
var nodes = {};

var dname = "";

links.forEach(function(link) {
    link.source = nodes[link.source] || 
        (nodes[link.source] = {name: link.source});
    link.target = nodes[link.target] || 
        (nodes[link.target] = {name: link.target});
});

<%=nodes%>
console.log(nodes)

var color = d3.scale.category20c();

var svg = d3.select("#chart").append("svg")                             
    .attr("width", x)                                               
    .attr("height", 400);
 
var force = d3.layout.force()
    .nodes(d3.values(nodes))
    .links(links)
    .size([x, 400])
    .linkDistance(function(d){ return Math.random() * 200 + 100 })
    .linkStrength(0.5,1)
    .charge(-300)
    .on("tick", tick)
    .start();
 
svg.append("svg:defs").selectAll("marker")
    .data(["end"])      
  .enter().append("svg:marker")    
    .attr("id", String)
    .attr("orient", "auto")
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", 0)
    .attr("markerWidth", 10)
    .attr("markerHeight", 10)
  .append("svg:path")
    .attr("d", "M0,-5L10,0L0,5")
    .style("fill","red");
 
var path = svg.append("svg:g").selectAll("path")
    .data(force.links())
  .enter().append("svg:path")
    .attr("class", function(d) { return "link " + d.type; })
    .attr("marker-end", "url(#end)");
 
var node = svg.selectAll(".node")
    .data(force.nodes())
  .enter().append("g")
    .attr("class", "node")
    .call(force.drag);

node.append("text")                                                                                   
    .attr("x", 12)                                                                                                                                                                                          
    .attr("dy", ".35em")                                                                              
    .text(function(d) { return d.name; });
 
node.append("circle")
    .attr("r", 8)
    .style("fill", function(d) { return color(d.name); });
 
function tick() {
    path.attr("d", function(d) {
        var dx = d.target.x - d.source.x,
            dy = d.target.y - d.source.y,
            dr = Math.sqrt(dx * dx + dy * dy);
        return "M" + 
            d.source.x + "," + 
            d.source.y + "A" + 
            dr + "," + dr + " 0 0,1 " + 
            d.target.x + "," + 
            d.target.y;
    });

    node.attr("transform", function(d) { 
		    return "translate(" + d.x + "," + d.y + ")"; }); 
}
 
</script>
<%+footer%>
